import streamlit as st
import pandas as pd
import calendar
from datetime import datetime, date
import altair as alt
import io
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Gerador de Escala de Trabalho",
    page_icon="üìÖ",
    layout="wide"
)

# Fun√ß√£o para gerar a escala considerando exce√ß√µes e equilibrar a carga de trabalho
def gerar_escala(mes, ano, funcionarios, excecoes, considerar_carga=True):
    # Dicion√°rio para controlar a carga de trabalho de cada funcion√°rio
    carga_trabalho = {f: 0 for f in funcionarios}
    
    # Identificar os dias √∫teis do m√™s
    dias_uteis = []
    for dia in range(1, calendar.monthrange(ano, mes)[1] + 1):
        data = date(ano, mes, dia)
        dia_semana = data.weekday()
        if dia_semana < 5:  # Segunda (0) a Sexta (4)
            dias_uteis.append(dia)
    
    escala = []
    
    # Para cada dia √∫til, alocar funcion√°rios aos turnos
    for dia in dias_uteis:
        data = date(ano, mes, dia)
        dia_semana = calendar.day_name[data.weekday()]
        
        # Encontrar funcion√°rios dispon√≠veis para cada turno
        disponiveis_matutino = [f for f in funcionarios if f not in excecoes.get((dia, "Matutino"), [])]
        disponiveis_vespertino = [f for f in funcionarios if f not in excecoes.get((dia, "Vespertino"), [])]
        
        # Se considerar carga de trabalho, ordenar funcion√°rios pelo menor n√∫mero de turnos alocados
        if considerar_carga:
            disponiveis_matutino.sort(key=lambda f: carga_trabalho[f])
            disponiveis_vespertino.sort(key=lambda f: carga_trabalho[f])
        
        # Alocar funcion√°rios aos turnos
        turno_matutino = disponiveis_matutino[0] if disponiveis_matutino else None
        if turno_matutino:
            carga_trabalho[turno_matutino] += 1
        
        # Tentar n√£o alocar o mesmo funcion√°rio para os dois turnos do mesmo dia
        if turno_matutino in disponiveis_vespertino and len(disponiveis_vespertino) > 1:
            disponiveis_vespertino.remove(turno_matutino)
        
        turno_vespertino = disponiveis_vespertino[0] if disponiveis_vespertino else None
        if turno_vespertino:
            carga_trabalho[turno_vespertino] += 1
        
        escala.append({
            "Data": f"{dia:02d}/{mes:02d}/{ano}",
            "Dia da Semana": dia_semana,
            "Turno Matutino": turno_matutino,
            "Turno Vespertino": turno_vespertino
        })
    
    df = pd.DataFrame(escala)
    
    # Adicionar estat√≠sticas de carga de trabalho
    estatisticas = pd.DataFrame({
        "Funcion√°rio": list(carga_trabalho.keys()),
        "Total de Turnos": list(carga_trabalho.values())
    })
    
    return df, estatisticas

# Fun√ß√£o para exportar para Excel com formata√ß√£o
def exportar_excel(df, estatisticas, mes, ano):
    output = io.BytesIO()
    workbook = Workbook()
    
    # Primeira aba - Escala
    ws_escala = workbook.active
    ws_escala.title = "Escala"
    
    # Adicionar t√≠tulo
    ws_escala.merge_cells('A1:D1')
    ws_escala['A1'] = f"Escala de Trabalho - {calendar.month_name[mes]} de {ano}"
    ws_escala['A1'].font = Font(bold=True, size=14)
    ws_escala['A1'].alignment = Alignment(horizontal='center')
    
    # Adicionar cabe√ßalhos
    headers = ["Data", "Dia da Semana", "Turno Matutino", "Turno Vespertino"]
    for col, header in enumerate(headers, start=1):
        cell = ws_escala.cell(row=2, column=col, value=header)
        cell.font = Font(bold=True)
        cell.fill = PatternFill(start_color="DDDDDD", end_color="DDDDDD", fill_type="solid")
    
    # Adicionar dados
    for i, row in df.iterrows():
        ws_escala.cell(row=i+3, column=1, value=row["Data"])
        ws_escala.cell(row=i+3, column=2, value=row["Dia da Semana"])
        ws_escala.cell(row=i+3, column=3, value=row["Turno Matutino"])
        ws_escala.cell(row=i+3, column=4, value=row["Turno Vespertino"])
    
    # Ajustar largura das colunas
    for col in ws_escala.columns:
        max_length = 0
        for cell in col:
            if cell.value:
                max_length = max(max_length, len(str(cell.value)))
        adjusted_width = max_length + 2
        ws_escala.column_dimensions[col[0].column_letter].width = adjusted_width
    
    # Segunda aba - Estat√≠sticas
    ws_stats = workbook.create_sheet(title="Estat√≠sticas")
    
    # Adicionar t√≠tulo
    ws_stats.merge_cells('A1:B1')
    ws_stats['A1'] = "Estat√≠sticas de Aloca√ß√£o"
    ws_stats['A1'].font = Font(bold=True, size=14)
    ws_stats['A1'].alignment = Alignment(horizontal='center')
    
    # Adicionar cabe√ßalhos
    ws_stats['A2'] = "Funcion√°rio"
    ws_stats['B2'] = "Total de Turnos"
    ws_stats['A2'].font = Font(bold=True)
    ws_stats['B2'].font = Font(bold=True)
    ws_stats['A2'].fill = PatternFill(start_color="DDDDDD", end_color="DDDDDD", fill_type="solid")
    ws_stats['B2'].fill = PatternFill(start_color="DDDDDD", end_color="DDDDDD", fill_type="solid")
    
    # Adicionar dados
    for i, row in estatisticas.iterrows():
        ws_stats.cell(row=i+3, column=1, value=row["Funcion√°rio"])
        ws_stats.cell(row=i+3, column=2, value=row["Total de Turnos"])
    
    # Ajustar largura das colunas
    for col in ws_stats.columns:
        max_length = 0
        for cell in col:
            if cell.value:
                max_length = max(max_length, len(str(cell.value)))
        adjusted_width = max_length + 2
        ws_stats.column_dimensions[col[0].column_letter].width = adjusted_width
    
    workbook.save(output)
    output.seek(0)
    return output

# Interface do Streamlit
st.title("üóìÔ∏è Gerador de Escala de Trabalho")

# Criar layout com colunas
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("Configura√ß√µes")
    
    # Sele√ß√£o do m√™s e ano
    mes = st.selectbox("Selecione o m√™s", list(range(1, 13)), 
                       index=datetime.today().month - 1, 
                       format_func=lambda x: calendar.month_name[x])
    ano = st.selectbox("Selecione o ano", 
                       list(range(datetime.today().year - 1, datetime.today().year + 5)))
    
    # Op√ß√µes adicionais
    st.subheader("Op√ß√µes")
    equilibrar_carga = st.checkbox("Equilibrar carga de trabalho entre funcion√°rios", value=True)
    
    # Inser√ß√£o da lista de funcion√°rios
    st.subheader("Funcion√°rios")
    funcionarios_input = st.text_area("Digite os nomes dos funcion√°rios (um por linha)")
    funcionarios = [f.strip() for f in funcionarios_input.split("\n") if f.strip()]
    
    # Mostrar n√∫mero de funcion√°rios e dias √∫teis
    if funcionarios:
        dias_uteis = sum(1 for dia in range(1, calendar.monthrange(ano, mes)[1] + 1) 
                        if datetime(ano, mes, dia).weekday() < 5)
        st.info(f"Total de funcion√°rios: {len(funcionarios)}")
        st.info(f"Dias √∫teis no m√™s: {dias_uteis}")
        st.info(f"Total de turnos a serem preenchidos: {dias_uteis * 2}")

with col2:
    # Interface para exce√ß√µes
    st.subheader("Exce√ß√µes")
    excecoes = {}
    
    if funcionarios:
        with st.expander("Configurar exce√ß√µes"):
            for funcionario in funcionarios:
                st.write(f"**{funcionario}**")
                
                col_data, col_turno = st.columns(2)
                
                with col_data:
                    datas_excecoes = st.text_input(
                        f"Dias que {funcionario} n√£o pode trabalhar (ex: 1, 2, 15)",
                        key=f"data_{funcionario}"
                    )
                
                with col_turno:
                    turnos_excecoes = st.multiselect(
                        f"Turnos indispon√≠veis",
                        ["Matutino", "Vespertino"],
                        key=f"turno_{funcionario}"
                    )
                
                st.divider()
                
                if datas_excecoes and turnos_excecoes:
                    try:
                        datas_excecoes = [int(d.strip()) for d in datas_excecoes.split(",") if d.strip().isdigit()]
                        for data in datas_excecoes:
                            for turno in turnos_excecoes:
                                excecoes.setdefault((data, turno), []).append(funcionario)
                    except ValueError:
                        st.error(f"Formato inv√°lido para as datas de {funcionario}")

    # Bot√£o para gerar escala
    if st.button("Gerar Escala", type="primary"):
        if not funcionarios:
            st.warning("Por favor, insira pelo menos um funcion√°rio.")
        else:
            with st.spinner("Gerando escala..."):
                escala_df, estatisticas_df = gerar_escala(mes, ano, funcionarios, excecoes, equilibrar_carga)
                
                # Mostrar resultados em tabs
                tab1, tab2, tab3 = st.tabs(["Escala", "Estat√≠sticas", "Visualiza√ß√£o"])
                
                with tab1:
                    st.dataframe(escala_df, use_container_width=True)
                    
                    # Op√ß√µes de download
                    col_csv, col_excel = st.columns(2)
                    with col_csv:
                        csv = escala_df.to_csv(index=False).encode("utf-8")
                        st.download_button(
                            label="üìÑ Baixar como CSV",
                            data=csv,
                            file_name=f"escala_{mes}_{ano}.csv",
                            mime="text/csv"
                        )
                    
                    with col_excel:
                        excel_data = exportar_excel(escala_df, estatisticas_df, mes, ano)
                        st.download_button(
                            label="üìä Baixar como Excel",
                            data=excel_data,
                            file_name=f"escala_{mes}_{ano}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                
                with tab2:
                    st.subheader("Distribui√ß√£o de turnos por funcion√°rio")
                    st.dataframe(estatisticas_df, use_container_width=True)
                    
                    # Gr√°fico de barras para visualizar distribui√ß√£o de turnos
                    chart = alt.Chart(estatisticas_df).mark_bar().encode(
                        x=alt.X('Funcion√°rio', sort='-y'),
                        y=alt.Y('Total de Turnos'),
                        color=alt.Color('Funcion√°rio', legend=None)
                    ).properties(
                        height=300
                    )
                    st.altair_chart(chart, use_container_width=True)
                
                with tab3:
                    st.subheader("Visualiza√ß√£o da Escala")
                    
                    # Preparar dados para visualiza√ß√£o do calend√°rio
                    cal_data = []
                    for i, row in escala_df.iterrows():
                        data = row['Data']
                        dia = int(data.split('/')[0])
                        cal_data.append({
                            'Dia': dia,
                            'Turno': 'Matutino',
                            'Funcion√°rio': row['Turno Matutino'] or '-'
                        })
                        cal_data.append({
                            'Dia': dia,
                            'Turno': 'Vespertino',
                            'Funcion√°rio': row['Turno Vespertino'] or '-'
                        })
                    
                    cal_df = pd.DataFrame(cal_data)
                    
                    # Criar um heatmap da escala
                    heatmap = alt.Chart(cal_df).mark_rect().encode(
                        x=alt.X('Dia:O', title='Dia do M√™s'),
                        y=alt.Y('Turno:N', title=None),
                        color=alt.Color('Funcion√°rio:N', legend=alt.Legend(orient='bottom')),
                        tooltip=['Dia', 'Turno', 'Funcion√°rio']
                    ).properties(
                        title=f"Escala de {calendar.month_name[mes]} de {ano}",
                        width=600
                    )
                    
                    # Adicionar r√≥tulos
                    text = alt.Chart(cal_df).mark_text().encode(
                        x=alt.X('Dia:O'),
                        y=alt.Y('Turno:N'),
                        text='Funcion√°rio',
                        color=alt.condition(
                            alt.datum.Funcion√°rio == '-',
                            alt.value('red'),
                            alt.value('white')
                        )
                    )
                    
                    st.altair_chart(heatmap + text, use_container_width=True)
